# -*- coding: utf-8 -*-
"""finl ss

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lQ61Ci1lVIJkqNK859w8qpfy9D_gYIO_
"""

# Import necessary libraries
import streamlit as st
import pickle
from textblob import TextBlob
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the pre-trained model and vectorizer
@st.cache_resource
def load_model():
    with open("logistic_regression.pkl", "rb") as model_file, open("tfidf_vectorizer.pkl", "rb") as vectorizer_file:
        model = pickle.load(model_file)
        vectorizer = pickle.load(vectorizer_file)
    return model, vectorizer

model, vectorizer = load_model()

# Title
st.title("Product Review Sentiment Analysis")

# Sidebar Info
st.sidebar.title("About")
st.sidebar.info(
    """
    This app analyzes product reviews to determine their sentiment: 
    **Positive**, **Neutral**, or **Negative**. 
    It also visualizes sentiment trends by category!
    """
)

# Input Review
st.header("Analyze a Review")
review = st.text_area("Enter your product review below:")

# Analyze Sentiment
if st.button("Analyze Sentiment"):
    if review.strip():
        # Preprocessing and prediction
        review_vectorized = vectorizer.transform([review])
        prediction = model.predict(review_vectorized)
        sentiment = ["Negative", "Neutral", "Positive"][prediction[0]]

        # Display Sentiment
        st.subheader("Predicted Sentiment")
        st.write(f"**{sentiment}**")

        # Optional: Show TextBlob Sentiment Polarity
        polarity = TextBlob(review).sentiment.polarity
        st.subheader("TextBlob Sentiment Polarity")
        st.write(f"Polarity Score: {polarity:.2f}")
        st.info(
            "Polarity ranges from -1 (most negative) to 1 (most positive). "
            "A score close to 0 indicates neutrality."
        )
    else:
        st.warning("Please enter a review to analyze.")

# Sentiment by Category Visualization
st.header("Sentiment Trends by Category")
uploaded_file = st.file_uploader(
    "Upload a dataset to visualize sentiment trends (CSV with 'categories' and 'reviews.text' columns):",
    type=["csv"],
)

if uploaded_file:
    # Load uploaded dataset
    data = pd.read_csv(uploaded_file)

    # Clean up categories
    if "categories" in data.columns and "reviews.text" in data.columns:
        # Preprocessing for category-based sentiment
        data["primary_category"] = data["categories"].str.split(",").str[0]
        data["cleaned_text"] = data["reviews.text"].fillna("").str.lower()
        data["sentiment_label"] = data["cleaned_text"].apply(
            lambda x: ["Negative", "Neutral", "Positive"][
                model.predict(vectorizer.transform([x]))[0]
            ]
        )
        data["sentiment_score"] = data["sentiment_label"].map(
            {"Positive": 1, "Neutral": 0, "Negative": -1}
        )

        # Average sentiment by category
        avg_sentiment = (
            data.groupby("primary_category")["sentiment_score"].mean().sort_values()
        )

        # Plotting
        st.subheader("Average Sentiment Score by Product Category")
        fig, ax = plt.subplots(figsize=(10, 8))
        avg_sentiment.plot(kind="barh", color="skyblue", ax=ax)
        ax.set_xlabel("Average Sentiment Score")
        ax.set_ylabel("Product Category")
        ax.set_title("Average Sentiment Score by Product Category")
        st.pyplot(fig)

        # Data preview
        if st.checkbox("Show processed data"):
            st.write(data[["primary_category", "cleaned_text", "sentiment_label"]].head())
    else:
        st.error("Uploaded file must contain 'categories' and 'reviews.text' columns.")
